const { cmd, commands } = require('../command');
const config = require('../config');
const os = require('os');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, fetchJson , runtime ,sleep } = require('../DATABASE/functions')
const { checkAccess, isPremiumUser, blacklistedJIDs, premiumJIDs, dataLoaded } = require('../DATABASE/accessControl');
const mono = "```"

    function detectPlatform() {
      if (process.env.REPL_ID) return 'Replit';
      if (process.env.HEROKU_APP_NAME) return 'Heroku';
      if (process.env.KOYEB_PROJECT_ID) return 'Koyeb';
      if (process.env.AWS_LAMBDA_FUNCTION_NAME) return 'AWS Lambda';
      if (process.env.VERCEL) return 'Vercel';
      if (process.env.RENDER) return 'Render';
      if (process.env.NETLIFY) return 'Netlify';
      if (process.env.WORKFLOW) return 'Workflow';
      if (process.env.FLYIO_APP_NAME) return 'Fly.io';
      return 'Unknown Platform';
    }
    const platformName = detectPlatform();

    cmd({
      pattern: "system",
      alias: ["status", "botinfo"],
      desc: "Check uptime, RAM usage, CPU info, and more",
      category: "main",
      react: "üß¨",
      filename: __filename
    }, async (conn, mek, m, { from, reply }) => {
      try {
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent
        
          
          let desc = `*‰πÇ SAHAS-MD SYSTEM INFORMATION*

*‚è∞ ùñ¥ùóâùóçùóÇùóÜùñæ :* ${uptime}
*üìª ùñØùóÖùñ∫ùóçùñøùóàùóãùóÜ :* ${platformName}
*‚öôÔ∏è ùñ±ùñ∫ùóÜ ùñ¥ùóåùñ∫ùóÄùñæ :* ${memoryUsage} MB / ${totalMemory} MB
*üë®‚Äçüíª ùñÆùóêùóáùñæùóã :* Sahas Tech 
*ü§ñ ùñµùñæùóãùóåùóÇùóàùóá :* 1.0.0
‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé
> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`

       

          

          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥  |   ùöÉùô¥ùô≤ùô∑ „Ç∏',
          newsletterJid: "120363296605464049@newsletter",
          },
          externalAdReply: {
              title: `SAHAS-MD System Information`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://pomf2.lain.la/f/5fz9fk69.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });













cmd({
      pattern: "runtime",
      desc: "Chek Bot Runtime",
      category: "main",
      react: "‚è∞",
      filename: __filename
    }, async (conn, mek, m, { from, reply }) => {
      try {
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üöÄ ùñ±ùóéùóáùóçùóÇùóÜùñæ : ${uptime}*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥  |   ùöÉùô¥ùô≤ùô∑ „Ç∏',
          newsletterJid: "120363296605464049@newsletter",
          },
          externalAdReply: {
              title: `Runtime ‚è∞`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://files.catbox.moe/de82e3.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


        




cmd({
      pattern: "alive",
      alias: ["online"],
      desc: "Chek Bot Alive",
      category: "main",
      react: "üßöüèª‚Äç‚ôÄÔ∏è",
      filename: __filename
    },
    
    async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try{
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üëã Hello ${pushname}*

ùñ≥ùóíùóâùñæ .ùóÜùñæùóáùóé ùñ¶ùñæùóç ùñ¨ùóí ùñ¢ùóàùóÜùóÜùñ∫ùóáùñΩ ùñ´ùóÇùóåùóç. ùñ≤ùñ†ùòèùñ†ùñ≤ ùñ¨ùñ£ ùóÇùóå ùñ∫ ùñ≤ùóÇùóÜùóâùóÖùóí ùñµùñæùóãùóí ùñØùóàùóêùñæùóãùñøùóéùóÖùóÖ ùñ∂ùóÅùóçùóåùñ∫ùóâùóâ ùñ°ùóàùóç. ùñ°ùñ∫ùóåùñæ ùñ±ùóéùóáùóÇùóáùóÄ ùñÆùóá ùñ°ùñ∫ùóÖùóÇùñæùóíùóå ùñ†ùóáùñΩ ùñµùñ∫ùóãùóÇùóàùóéùóå ùñ†ùñØùñ®ùóå. ùñ®ùóç ùñÆùñøùñøùñæùóã  ùñ≤ùñæùñ∫ùóÜùóÖùñæùóåùóå ùñ•ùóéùóáùñºùóçùóÇùóàùóáùñ∫ùóÖùóÇùóçùóí ùñ∂ùóÇùóçùóÅùóàùóéùóç ùñ°ùóéùóçùóçùóàùóáùóå. ùñ£ùñæùóÖùóÇùóèùñæùóãùóÇùóáùóÄ ùñ∞ùóéùóÇùñºùóÑ ùñ†ùóáùñΩ ùñ§ùñøùñøùóÇùñºùóÇùñæùóáùóç ùñØùñæùóãùñøùóàùóãùóÜùñ∫ùóáùñºùñæ ùñ•ùóàùóã ùñ†ùóéùóçùóàùóÜùñ∫ùóçùñæùñΩ ùñ≥ùñ∫ùóåùóÑùóå ùñ†ùóáùñΩ ùñ¢ùóàùóÜùóÜùñ∫ùóáùñΩùóå. ùñ≠ùóàùóê ùñ∏ùóàùóé ùñ¢ùñ∫ùóá ùñ¶ùñæùóç ùñ¨ùóí ùñ≤ùóíùóåùóçùñæùóÜ ùñ®ùóáùñøùóàùóãùóÜùñ∫ùóçùóÇùóàùóá ùñ≥ùóíùóâùñæ .ùóåùóíùóåùóçùñæùóÜ ùñ†ùóáùñΩ ùñ≤ùñæùóáùñΩ ùñ®ùóç. 

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥  |   ùöÉùô¥ùô≤ùô∑ „Ç∏',
          newsletterJid: "120363296605464049@newsletter",
          },
          externalAdReply: {
              title: `I'm Alive Now üë®‚Äçüíª`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://files.catbox.moe/de82e3.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });

















cmd({
      pattern: "menu",
      alias: ["panel"],
      desc: "Get Bot Menu",
      category: "main",
      react: "üìÅ",
      filename: __filename
},
    
    async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try{
   
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üëã Hello ${pushname}*
          
‚ú® ùó™ùó≤ùóπùó∞ùóºùó∫ùó≤ ùòÅùóº ùêíùêÄùêáùêÄùêí ùêåùêÉ! ‚ú® 
‚ï≠‚îÄ„Äå ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ·¥ò·¥Ä…¥·¥á ü„Äç
‚îÇ‚óà ùñ±ùóéùóáùóçùóÇùóÜùñæ : ${uptime}
‚îÇ‚óà ùñÆùóêùóáùñæùóã ùñ≠ùñ∫ùóÜùñæ :  ùêíùêÄùêáùêÄùêí ùêçùêÑùêìùêáùêíùêÄùêëùêÄ
‚îÇ‚óà ùñÆùóêùóáùñæùóã ùñ≠ùóéùóÜùñªùñæùóã : 94718913389
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üì• *ùêÉùê®ùê∞ùêßùê•ùê®ùêöùêù ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 .apk
.twitter
.gdrive
.mediafire
.fb
.img
.play
.song
.video
.tiktok
.xvideo
.xnxx
.mvdl or cinerurl

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üëæ *ùêÄùê¢ ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 .ai

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üîß *ùêåùêöùê¢ùêß ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 .alive
.menu
.system
.ping
.runtime
.about
.support
.allmenu
.owner
.repo
.settings

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üéâ *ùêÖùêÆùêß ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 .animegirl
.dog
.fact
.hack
.joke
.quote

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üîÑ *ùêÇùê®ùêßùêØùêûùê´ùê≠ ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
.sticker
.convert
.currency
.url

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üîç *ùêíùêûùêöùê´ùêúùê° ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 .srepo
.yts

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üë• *ùêÜùê´ùê®ùêÆùê© ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 .mute
.unmute
.promote
.demote
.del
.add
.setgoodbye
.setwelcome
.admins
.groupdesc
.groupinfo
.grouplink
.gname
.setsubject
.tagall
.requests
.accept
.reject
.hidetag
.kick
.unlock
.lock
.approve
.poll
.getpic

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üîí *ùêéùê∞ùêßùêûùê´ ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 .shutdown
.broadcast
.setpp
.block
.unblock
.clearchats
.jid
.gjid
.restart
.setautobio
.update

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 ‚öôÔ∏è *ùêéùê≠ùê°ùêûùê´ ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
.movie
.anime1
.anime2
.anime3
.anime4
.anime5
.define
.githubstalk
.gpass
.trt
.weather

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üõ†Ô∏è *ùêìùê®ùê®ùê•ùê¨ ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 .calc
.translate
.reverse
.tempmail
.checkmail
.delmail
.encode
.decode
.npmstalk
.iplookup
.instastalk
.githubuser
.password
.hijact

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫
 üì∞ *ùêçùêûùê∞ùê¨ ùêåùêûùêßùêÆ*
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 .hirunews
.sirasanews
.derananews
.news
.lankadeepanews
.bbcnews

‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫


> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥  |   ùöÉùô¥ùô≤ùô∑ „Ç∏',
          newsletterJid: "120363296605464049@newsletter",
          },
          externalAdReply: {
              title: `SAHAS-MD Menu List`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://pomf2.lain.la/f/5fz9fk69.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


cmd({
      pattern: "owner",
      desc: "Chek Bot Owner",
      category: "main",
      react: "üë®‚Äçüíª",
      filename: __filename
    },
    
    async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try{
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üëã Hello ${pushname}*

*üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥-Ôº≠Ôº§ üë®‚Äçüíªüíó*

> *ùó¢ùó™ùó°ùóòùó• ùóúùó°ùóôùó¢* 

*‚ö°·¥è·¥°…¥·¥á Ä …¥·¥Ä·¥ç·¥á -: Íú±·¥Ä ú·¥ÄÍú± …¥·¥á·¥õ úÍú±·¥Ä Ä·¥Ä (Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú)*
*‚ö°…¥·¥ú·¥ç ô·¥á Ä* -: 94718913389
*‚ö° è·¥è·¥ú·¥õ·¥ú ô·¥á -:* https://www.youtube.com/@Sahas_Tech
*‚ö°·¥° ú·¥Ä·¥õÍú±·¥Ä·¥ò·¥ò ·¥Ñ ú·¥Ä…¥…¥·¥á ü-:* https://whatsapp.com/channel/0029VaiTjMlK5cDLek3bB533

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥  |   ùöÉùô¥ùô≤ùô∑ „Ç∏',
          newsletterJid: "120363296605464049@newsletter",
          },
          externalAdReply: {
              title: `SAHAS-MD Owner Information`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://pomf2.lain.la/f/5fz9fk69.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });

